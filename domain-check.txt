import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/user.model'; // Make sure this path is correct
import { JWT_SECRET } from '../config/jwt';
import { JwtPayload } from '../interfaces/jwt.interface'; // Your JwtPayload interface

// Extend Express Request to include the 'user' property
declare global {
  namespace Express {
    interface Request {
      user?: JwtPayload; // This makes req.user available and typed
    }
  }
}

export const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');

  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
    req.user = decoded; // Attach decoded JWT payload to request

    // --- NEW: Domain Verification ---
    // 1. Fetch the user from the database using the userId from the JWT
    //    Ensure your JWT payload has userId (preferably the _id from MongoDB)
    const userFromDb = await User.findById(req.user.userId);

    if (!userFromDb) {
      return res.status(404).json({ message: 'User not found in database' });
    }

    // 2. Compare the domain from the JWT with the domain stored in the database
    if (userFromDb.domain !== req.user.domain) {
      // This case means the user's JWT domain doesn't match their stored domain
      // This could indicate a token issued under a different domain, or domain change.
      return res.status(403).json({ message: 'You are not allowed in this organization.' });
    }
    // --- END NEW ---

    next(); // If all checks pass, proceed to the next middleware/route handler

  } catch (error) {
    // Handle specific JWT errors if needed (e.g., TokenExpiredError)
    if (error instanceof jwt.TokenExpiredError) {
      return res.status(401).json({ message: 'Token expired' });
    }
    res.status(401).json({ message: 'Token is not valid' });
  }
};